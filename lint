#!/bin/node

const chokidar = require("chokidar"),
    {spawn} = require("child_process")

const colors = {
    // Reset
    reset: "\x1B[0m", // Text Reset

    // Regular Colors
    black: "\x1B[0;30m", // Black
    red: "\x1B[0;31m", // Red
    green: "\x1B[0;32m", // Green
    yellow: "\x1B[0;33m", // Yellow
    blue: "\x1B[0;34m", // Blue
    purple: "\x1B[0;35m", // Purple
    cyan: "\x1B[0;36m", // Cyan
    white: "\x1B[0;37m", // White

    // Bold
    bBlack: "\x1B[1;30m", // Black
    bRed: "\x1B[1;31m", // Red
    bGreen: "\x1B[1;32m", // Green
    bYellow: "\x1B[1;33m", // Yellow
    bBlue: "\x1B[1;34m", // Blue
    bPurple: "\x1B[1;35m", // Purple
    bCyan: "\x1B[1;36m", // Cyan
    bWhite: "\x1B[1;37m", // White

    // Underline
    uBlack: "\x1B[4;30m", // Black
    uRed: "\x1B[4;31m", // Red
    uGreen: "\x1B[4;32m", // Green
    uYellow: "\x1B[4;33m", // Yellow
    uBlue: "\x1B[4;34m", // Blue
    uPurple: "\x1B[4;35m", // Purple
    uCyan: "\x1B[4;36m", // Cyan
    uWhite: "\x1B[4;37m", // White

    // Background
    onBlack: "\x1B[40m", // Black
    onRed: "\x1B[41m", // Red
    onGreen: "\x1B[42m", // Green
    onYellow: "\x1B[43m", // Yellow
    onBlue: "\x1B[44m", // Blue
    onPurple: "\x1B[45m", // Purple
    onCyan: "\x1B[46m", // Cyan
    onWhite: "\x1B[47m", // White

    // High Intensity
    iBlack: "\x1B[0;90m", // Black
    iRed: "\x1B[0;91m", // Red
    iGreen: "\x1B[0;92m", // Green
    iYellow: "\x1B[0;93m", // Yellow
    iBlue: "\x1B[0;94m", // Blue
    iPurple: "\x1B[0;95m", // Purple
    iCyan: "\x1B[0;96m", // Cyan
    iWhite: "\x1B[0;97m", // White

    // Bold High Intensity
    biBlack: "\x1B[1;90m", // Black
    biRed: "\x1B[1;91m", // Red
    biGreen: "\x1B[1;92m", // Green
    biYellow: "\x1B[1;93m", // Yellow
    biBlue: "\x1B[1;94m", // Blue
    biPurple: "\x1B[1;95m", // Purple
    biCyan: "\x1B[1;96m", // Cyan
    biWhite: "\x1B[1;97m", // White

    // High Intensity backgrounds
    onIBlack: "\x1B[0;100m", // Black
    onIRed: "\x1B[0;101m", // Red
    onIGreen: "\x1B[0;102m", // Green
    onIYellow: "\x1B[0;103m", // Yellow
    onIBlue: "\x1B[0;104m", // Blue
    onIPurple: "\x1B[0;105m", // Purple
    onICyan: "\x1B[0;106m", // Cyan
    onIWhite: "\x1B[0;107m", // White
}

Object.freeze(colors)

const eslint = (
    blob = "src/{**/*,*}.{ts,tsx}",
) => new Promise((resolve, reject) => {
    const fix = process.argv.includes("--fix") || process.argv.includes("-f")
            ? "--fix"
            : "",

        childProcess = spawn("./node_modules/.bin/eslint_d", [blob, fix])

    childProcess.stderr.on("data", (data) => {
        if (data instanceof Buffer) {
            reject(data.toString().trim())
        }

        reject(data)
    })

    childProcess.stdout.on("data", (data) => {
        if (data instanceof Buffer) {
            resolve(data.toString().trim())
        }

        resolve(data)
    })

    childProcess.on("exit", () => {
        resolve("")
    })
});

const stylelint = (
    blob = "**/*.{scss,ssass}",
) => new Promise((resolve, reject) => {
    const fix = process.argv.includes("--fix") || process.argv.includes("-f")
            ? "--fix"
            : "",

        childProcess = spawn("./node_modules/.bin/stylelint", [blob, fix])

    childProcess.stderr.on("data", (data) => {
        if (data instanceof Buffer) {
            reject(data.toString().trim())
        }

        reject(data)
    })

    childProcess.stdout.on("data", (data) => {
        if (data instanceof Buffer) {
            resolve(data.toString().trim())
        }

        resolve(data)
    })

    childProcess.on("exit", () => {
        resolve("")
    })
});

(async () => {
    console.log(await eslint())
})()

let islinting = false

const handleChange = (path) => {
    const start = Date.now()

    console.log(`\x1Bc${colors.bWhite}Linting${colors.reset} file ${colors.biBlue}${path}${colors.reset}`)

    try {
        if (!islinting) {
            islinting = true;
            (async () => {
            try {
                const output = path.includes(".ts")
                    ? await eslint(path)
                    : await stylelint(path)
                const pathSplit = path.split(".")
                const extension = pathSplit[pathSplit.length - 1]

                if (output) {
                    console.log(
                        output
                            .replace(/✖/gui, `${colors.bRed}✖`)
                            .replace(/[0-9]+:[0-9]+/gui, `${colors.bBlack}$&${colors.reset}`)
                            .replace(
                                new RegExp(`(.*)+\.${extension}`, "ui"),
                                `${colors.uWhite}$&${colors.reset}`,
                            )
                    )
                } else {
                    console.log(`${colors.green}You are error free!${colors.reset}`)
                }
            } catch (err) {
                console.log(err)
            }

            console.log(`${colors.bGreen}Done${colors.reset} in ${(Date.now() - start) / 1000}s.\n`)
            islinting = false
        })()
        }
    } catch (err) {
        console.error(err)
    }
}

if (process.argv.includes("--watch") || process.argv.includes("-w")) {
    console.log("Watching for changes...")
    chokidar.watch(["src/{**/*,*}.{ts,tsx}", "**/*.{scss}"]).on("change", handleChange)
}
